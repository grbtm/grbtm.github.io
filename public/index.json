[{"content":"You can get in touch with me via email:\ng r b t m @ p o s t e o . net\n","permalink":"http://localhost:1313/contact/","summary":"\u003cp\u003eYou can get in touch with me via email:\u003c/p\u003e\n\u003cp\u003eg r b t m @ p o s t e o . net\u003c/p\u003e","title":"Contact"},{"content":"üèóÔ∏è Enterprise Data Platform \u0026amp; System Design Offering comprehensive design and implementation services for modern data platforms and cloud solutions.\nKey Benefits:\nModern data architecture design using cloud-native solutions Data lakehouse implementation with focus on scalability and governance Multi-environment setups using Infrastructure as Code Data platform migration and modernization strategies High-availability system design End-to-end system integration Technologies: Terraform, Azure DevOps, Docker, Kubernetes, Jenkins1\nüîí Data Governance \u0026amp; Security Solutions Helping organizations establish robust data governance frameworks and security solutions.\nKey Benefits:\nComprehensive data governance framework development Role-based access control implementation across platforms Data lineage tracking and quality control systems Security architecture design and implementation Technologies: Databricks Unity Catalog, Entra ID1\nüõ†Ô∏è Data Engineering Excellence Providing expert data engineering services to build and optimize data pipelines.\nKey Benefits:\nData pipeline design and optimization Best practices and standards development Version-controlled development frameworks CI/CD pipeline implementation Technical team mentorship and training Technologies: Databricks, Spark, Python, Airflow, Kafka, Azure Data Factory1\n‚òÅÔ∏è Cloud Solutions Architecture Designing and implementing cloud-native solutions on Azure\nKey Benefits:\nAzure cloud platform expertise Cloud-native architecture design Infrastructure as Code implementation High-availability and disaster recovery solutions Cost optimization and performance tuning ü§ñ Machine Learning \u0026amp; AI Integration Integrating machine learning and AI into applications and workflows.\nKey Benefits:\nML pipeline development and optimization LLM-powered analytics solutions AI-driven automation systems Natural language processing implementations Technologies: PyTorch, MLflow, LangChain, scikit-learn, huggingface1\nüíª Software Engineering Providing expert software engineering services with a focus on Python.\nKey Benefits:\nAPI development and backend code Algorithmic development and optimization Scalable and maintainable codebase Integration with various data sources and services Performance tuning and debugging Technologies: Python, asyncio, Flask, FastAPI, JavaScript, Go, Scala1\nNote: These are key technologies, but not the only ones utilized.\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\u0026#160;\u0026#x21a9;\u0026#xfe0e;\n","permalink":"http://localhost:1313/services/","summary":"\u003ch2 id=\"-enterprise-data-platform--system-design\"\u003eüèóÔ∏è Enterprise Data Platform \u0026amp; System Design\u003c/h2\u003e\n\u003cp\u003eOffering comprehensive design and implementation services for modern data platforms and cloud solutions.\u003c/p\u003e\n\u003cp\u003e\u003cstrong\u003eKey Benefits:\u003c/strong\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003eModern data architecture design using cloud-native solutions\u003c/li\u003e\n\u003cli\u003eData lakehouse implementation with focus on scalability and governance\u003c/li\u003e\n\u003cli\u003eMulti-environment setups using Infrastructure as Code\u003c/li\u003e\n\u003cli\u003eData platform migration and modernization strategies\u003c/li\u003e\n\u003cli\u003eHigh-availability system design\u003c/li\u003e\n\u003cli\u003eEnd-to-end system integration\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cstrong\u003eTechnologies:\u003c/strong\u003e \u003ccode\u003eTerraform\u003c/code\u003e, \u003ccode\u003eAzure DevOps\u003c/code\u003e, \u003ccode\u003eDocker\u003c/code\u003e, \u003ccode\u003eKubernetes\u003c/code\u003e, \u003ccode\u003eJenkins\u003c/code\u003e\u003csup id=\"fnref:1\"\u003e\u003ca href=\"#fn:1\" class=\"footnote-ref\" role=\"doc-noteref\"\u003e1\u003c/a\u003e\u003c/sup\u003e\u003c/p\u003e\n\u003chr\u003e\n\u003ch2 id=\"-data-governance--security-solutions\"\u003eüîí Data Governance \u0026amp; Security Solutions\u003c/h2\u003e\n\u003cp\u003eHelping organizations establish robust data governance frameworks and security solutions.\u003c/p\u003e","title":"Services"},{"content":"Hi there üëã\nI\u0026rsquo;m Tom, a seasoned Solution and Data Architect with over 8 years of international experience, I specialize in designing and implementing enterprise-scale data and system infrastructures that drive business value.\nMy expertise spans across Solution Architecture, Data Architecture, Data Engineering, Software Engineering, Machine Learning, and Generative AI, allowing me to offer comprehensive solutions that help organizations transform their data capabilities and unlock new opportunities.\nWorking with clients across finance, telecommunications, industrial, and media streaming sectors, I bring a proven track record of leading complex data initiatives from conception to successful delivery.\n","permalink":"http://localhost:1313/about/","summary":"about me","title":"About Me"},{"content":"I recently had to set up a new M1 MacBook Pro for development, so I wrote down the steps I took along the way.\nBasic security The section \u0026lsquo;The easy stuff\u0026rsquo; in Ricard Bejarano\u0026rsquo;s \u0026lsquo;Hardening macOS\u0026rsquo; guide covers a few security basics for a new macOS machine (most importantly: disk encryption using FileVault, automatic security updates, lock screen after inactivity). The last recommendation in the section covers password managers. This is the approach I took:\nPassword manager I use 1Password as my password manager across multiple devices. To set it up on a new macOS machine, download the installer from: https://1password.com/downloads/mac/. From here on you can use the setup QR code (from the emergency kit printout page) to get it up and running quickly.\nTime Machine Backups Make sure to setup backups via Time Machine. :)\nTerminal emulator and shell Download iTerm2 from: https://iterm2.com/ . In macOS Ventura zsh is the default shell, which we will keep. Additionally, install Oh My Zsh for convenient management of your zsh shell:\nsh -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)\u0026#34; Text editor: Vim Vim is already pre-installed, works for me!\nSSH keys My understanding is that it\u0026rsquo;s considered best practice to generate new SSH keys for a new machine as opposed to copying the SSH keys from your old machine. This way the private SSH keys don\u0026rsquo;t have to leave the respective machine and are not flying around on old devices and being forgotten about. To generate a new key follow the prompts and make sure to enter a passphrase:\nssh-keygen -t ed25519 -C \u0026#34;your_email@example.com\u0026#34; For convenience I also recommend to use the ssh-agent to manage your keys securely so that you don\u0026rsquo;t have to type the passphrase everytime you use the keys: see Adding your SSH key to the ssh-agent\nHomebrew A great package manager for macOS:\n/bin/bash -c \u0026#34;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)\u0026#34; After the installation follow the suggested next steps to add Homebrew to your PATH.\nRosetta 2 An app that works in the background and enables you to run apps built for Intel Macs on an Apple silicon Mac (arm64). Many apps already support Apple silicon processors, but there\u0026rsquo;s still software out there (especially older versions of apps) that doesn\u0026rsquo;t run natively on Apple silicon. It\u0026rsquo;s also a recommendation to install Rosetta 2 before installing Docker Desktop. To install:\nsoftwareupdate --install-rosetta Note-taking: Obsidian Great note-taking app for plain text Markdown files:\nbrew install --cask obsidian Htop brew install htop tmux A great terminal multiplexer that let\u0026rsquo;s you run multiple terminal sessions in a single window (as well as detach and re-attach to sessions) :\nbrew install tmux Python Development IDE: VS Code To install VS Code download it from: https://code.visualstudio.com/Download After installing VS Code choose the Python extension via Extensions in the sidebar and search for \u0026lsquo;Python\u0026rsquo; in the Marketplace. It will also ask you to install macOS Command Line Developer Tools if you haven\u0026rsquo;t done already.\nPyenv To manage multiple Python versions, install pyenv:\nbrew install pyenv Set up your shell environment for Pyenv:\necho \u0026#39;export PYENV_ROOT=\u0026#34;$HOME/.pyenv\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;command -v pyenv \u0026gt;/dev/null || export PATH=\u0026#34;$PYENV_ROOT/bin:$PATH\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc echo \u0026#39;eval \u0026#34;$(pyenv init -)\u0026#34;\u0026#39; \u0026gt;\u0026gt; ~/.zshrc Install additional dependencies to be able to build Python, for my M1 Macbook Pro this was:\nbrew install xz (If this is not sufficient and you still encounter issues when building your first Python version as described below, check: https://github.com/pyenv/pyenv/wiki#suggested-build-environment )\nList all available versions and install for example Python 3.10.11:\npyenv install -l pyenv install 3.10.11 Docker Desktop Make sure you have Rosetta 2 installed, then download the image from https://docs.docker.com/desktop/install/mac-install/ and run:\nsudo hdiutil attach Docker.dmg sudo /Volumes/Docker/Docker.app/Contents/MacOS/install sudo hdiutil detach /Volumes/Docker (This default installation will perform privileged configurations once during the installation, for details see: https://docs.docker.com/desktop/mac/permission-requirements/#permission-requirements)\n","permalink":"http://localhost:1313/posts/2023/m1-dev-setup/","summary":"\u003cp\u003eI recently had to set up a new M1 MacBook Pro for development, so I wrote down the steps I took along the way.\u003c/p\u003e\n\u003ch3 id=\"basic-security\"\u003eBasic security\u003c/h3\u003e\n\u003cp\u003eThe section \u0026lsquo;The easy stuff\u0026rsquo; in Ricard Bejarano\u0026rsquo;s \u003ca href=\"https://www.bejarano.io/hardening-macos/\"\u003e\u0026lsquo;Hardening macOS\u0026rsquo; guide\u003c/a\u003e covers a few security basics for a new macOS machine (most importantly: disk encryption using \u003ccode\u003eFileVault\u003c/code\u003e, automatic security updates, lock screen after inactivity). The last recommendation in the section covers password managers. This is the approach I took:\u003c/p\u003e","title":"How to Set Up a Dev Environment on a MacBook Pro M1 in 2023"}]